#!/usr/bin/python
#
# aes.py: implements AES - Advanced Encryption Standard
# from the SlowAES project, http://code.google.com/p/slowaes/
#
# Copyright (c) 2008    Josh Davis ( http://www.josh-davis.org ),
#           Alex Martelli ( http://www.aleax.it )
#
# Ported from C code written by Laurent Haan ( http://www.progressive-coding.com )
#
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/
#
import os
import sys
import math

def append_PKCS7_padding(s):
    """return s padded to a multiple of 16-bytes by PKCS7 padding"""
    numpads = 16 - (len(s)%16)
    return s + numpads*chr(numpads)

def strip_PKCS7_padding(s):
    """return s stripped of PKCS7 padding"""
    if len(s)%16 or not s:
        raise ValueError("String of len %d can't be PCKS7-padded" % len(s))
    numpads = ord(s[-1])
    if numpads > 16:
        raise ValueError("String ending with %r can't be PCKS7-padded" % s[-1])
    return s[:-numpads]


# valid key sizes
keySize = dict(SIZE_128=16, SIZE_192=24, SIZE_256=32)

# Rijndael S-box
sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16]

# Rijndael Inverted S-box
rsbox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
        0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
        0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
        0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
        0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
        0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
        0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
        0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
        0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
        0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
        0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
        0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
        0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
        0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
        0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
        0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
        0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
        0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
        0x21, 0x0c, 0x7d]

def getSBoxValue(num):
    """Retrieves a given S-Box Value"""
    return sbox[num]


def getSBoxInvert(num):
    """Retrieves a given Inverted S-Box Value"""
    return rsbox[num]

def rotate( word):
    """ Rijndael's key schedule rotate operation.

    Rotate a word eight bits to the left: eg, rotate(1d2c3a4f) == 2c3a4f1d
    Word is an char list of size 4 (32 bits overall).
    """
    return word[1:] + word[:1]

# Rijndael Rcon
Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
        0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
        0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
        0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
        0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
        0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
        0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
        0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
        0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
        0xe8, 0xcb ]

def getRconValue( num):
    """Retrieves a given Rcon Value"""
    return Rcon[num]

def core( word, iteration):
    """Key schedule core."""
    # rotate the 32-bit word 8 bits to the left
    word = rotate(word)
    # apply S-Box substitution on all 4 parts of the 32-bit word
    for i in range(4):
        word[i] = getSBoxValue(word[i])
    # XOR the output of the rcon operation with i to the first part
    # (leftmost) only
    word[0] = word[0] ^ getRconValue(iteration)
    return word

def expandKey( key, size, expandedKeySize):
    """Rijndael's key expansion.

    Expands an 128,192,256 key into an 176,208,240 bytes key

    expandedKey is a char list of large enough size,
    key is the non-expanded key.
    """
    # current expanded keySize, in bytes
    currentSize = 0
    rconIteration = 1
    expandedKey = [0] * expandedKeySize

    # set the 16, 24, 32 bytes of the expanded key to the input key
    for j in range(size):
        expandedKey[j] = key[j]
    currentSize += size

    while currentSize < expandedKeySize:
        # assign the previous 4 bytes to the temporary value t
        t = expandedKey[currentSize-4:currentSize]

        # every 16,24,32 bytes we apply the core schedule to t
        # and increment rconIteration afterwards
        if currentSize % size == 0:
            t = core(t, rconIteration)
            rconIteration += 1
        # For 256-bit keys, we add an extra sbox to the calculation
        if size == keySize["SIZE_256"] and ((currentSize % size) == 16):
            for l in range(4): t[l] = getSBoxValue(t[l])

        # We XOR t with the four-byte block 16,24,32 bytes before the new
        # expanded key.  This becomes the next four bytes in the expanded
        # key.
        for m in range(4):
            expandedKey[currentSize] = expandedKey[currentSize - size] ^ \
                    t[m]
            currentSize += 1

    return expandedKey

def addRoundKey( state, roundKey):
    """Adds (XORs) the round key to the state."""
    for i in range(16):
        state[i] ^= roundKey[i]
    return state

def createRoundKey( expandedKey, roundKeyPointer):
    """Create a round key.
    Creates a round key from the given expanded key and the
    position within the expanded key.
    """
    roundKey = [0] * 16
    for i in range(4):
        for j in range(4):
            roundKey[j*4+i] = expandedKey[roundKeyPointer + i*4 + j]
    return roundKey

def galois_multiplication( a, b):
    """Galois multiplication of 8 bit characters a and b."""
    p = 0
    for counter in range(8):
        if b & 1: p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        # keep a 8 bit
        a &= 0xFF
        if hi_bit_set:
            a ^= 0x1b
        b >>= 1
    return p

#
# substitute all the values from the state with the value in the SBox
# using the state value as index for the SBox
#
def subBytes( state, isInv):
    if isInv: getter = getSBoxInvert
    else: getter = getSBoxValue
    for i in range(16): state[i] = getter(state[i])
    return state

# iterate over the 4 rows and call shiftRow() with that row
def shiftRows( state, isInv):
    for i in range(4):
        state = shiftRow(state, i*4, i, isInv)
    return state

# each iteration shifts the row to the left by 1
def shiftRow( state, statePointer, nbr, isInv):
    for i in range(nbr):
        if isInv:
            state[statePointer:statePointer+4] = \
                    state[statePointer+3:statePointer+4] + \
                    state[statePointer:statePointer+3]
        else:
            state[statePointer:statePointer+4] = \
                    state[statePointer+1:statePointer+4] + \
                    state[statePointer:statePointer+1]
    return state

# galois multiplication of the 4x4 matrix
def mixColumns( state, isInv):
    # iterate over the 4 columns
    for i in range(4):
        # construct one column by slicing over the 4 rows
        column = state[i:i+16:4]
        # apply the mixColumn on one column
        column = mixColumn(column, isInv)
        # put the values back into the state
        state[i:i+16:4] = column

    return state

# galois multiplication of 1 column of the 4x4 matrix
def mixColumn( column, isInv):
    if isInv: mult = [14, 9, 13, 11]
    else: mult = [2, 1, 1, 3]
    cpy = list(column)
    g = galois_multiplication

    column[0] = g(cpy[0], mult[0]) ^ g(cpy[3], mult[1]) ^ \
                g(cpy[2], mult[2]) ^ g(cpy[1], mult[3])
    column[1] = g(cpy[1], mult[0]) ^ g(cpy[0], mult[1]) ^ \
                g(cpy[3], mult[2]) ^ g(cpy[2], mult[3])
    column[2] = g(cpy[2], mult[0]) ^ g(cpy[1], mult[1]) ^ \
                g(cpy[0], mult[2]) ^ g(cpy[3], mult[3])
    column[3] = g(cpy[3], mult[0]) ^ g(cpy[2], mult[1]) ^ \
                g(cpy[1], mult[2]) ^ g(cpy[0], mult[3])
    return column

# applies the 4 operations of the forward round in sequence
def aes_round( state, roundKey):
    state = subBytes(state, False)
    state = shiftRows(state, False)
    state = mixColumns(state, False)
    state = addRoundKey(state, roundKey)
    return state

# applies the 4 operations of the inverse round in sequence
def aes_invRound( state, roundKey):
    state = shiftRows(state, True)
    state = subBytes(state, True)
    state = addRoundKey(state, roundKey)
    state = mixColumns(state, True)
    return state

# Perform the initial operations, the standard round, and the final
# operations of the forward aes, creating a round key for each round
def aes_main_true( state, expandedKey, nbrRounds):
    

    print "\nInit state"

    output_t = [0] * 16
    # unmap the block again into the output
    for k in range(4):
        # iterate over the rows
        for l in range(4):
          output_t[(k*4)+l] = state[(k+(l*4))]
   
    for j in range(0,16):
        print hex(output_t[j])[2:],

    # First round 

    addRoundKey(state, createRoundKey(expandedKey, 0))

    print "\nFirst round (addRoundKey)"

    output_t = [0] * 16
    # unmap the block again into the output
    for k in range(4):
        # iterate over the rows
        for l in range(4):
          output_t[(k*4)+l] = state[(k+(l*4))]
   
    for j in range(0,16):
        print hex(output_t[j])[2:],
    
    i = 1
    while i < nbrRounds:

        state = aes_round(state,createRoundKey(expandedKey, 16*i))

        print "\nFull round"

        output_t = [0] * 16
        # unmap the block again into the output
        for k in range(4):
            # iterate over the rows
            for l in range(4):
              output_t[(k*4)+l] = state[(k+(l*4))]
       
        for j in range(0,16):
            print hex(output_t[j])[2:],
        
        i += 1

   # Last round (not collected)

    state = subBytes(state, False)
    state = shiftRows(state, False)
    state = addRoundKey(state,createRoundKey(expandedKey, 16*nbrRounds))

    return state

# Perform the initial operations, the standard round, and the final
# operations of the forward aes, creating a round key for each round
def aes_main( state, expandedKey, nbrRounds):
    
    # First round (already done)

    #addRoundKey(state, createRoundKey(expandedKey, 0))
    
    i = 1
    while i < (nbrRounds): # PATCH here (bug ?)

        state = aes_round(state,createRoundKey(expandedKey, 16*i))

        print "\nUpdate state"

        output_t = [0] * 16
        # unmap the block again into the output
        for k in range(4):
            # iterate over the rows
            for l in range(4):
              output_t[(k*4)+l] = state[(k+(l*4))]
       
        for j in range(0,16):
            print hex(output_t[j])[2:],
        
        i += 1

   # Last round (not collected)

   # state = subBytes(state, False)
   # state = shiftRows(state, False)
   # state = addRoundKey(state,
   #                          createRoundKey(expandedKey, 16*nbrRounds))
    return state

def aes_main_optimized( state, expandedKey, nbrRounds):
    
    
    i = 2 # OPTMIZED HERE
    while i < (nbrRounds): #PATCH

        state = aes_round(state,createRoundKey(expandedKey, 16*i))

        print "\nUpdate state"

        output_t = [0] * 16
        # unmap the block again into the output
        for k in range(4):
            # iterate over the rows
            for l in range(4):
              output_t[(k*4)+l] = state[(k+(l*4))]
       
        for j in range(0,16):
            print hex(output_t[j])[2:],
        
        i += 1

  
    return state



if __name__=="__main__":

    #key = [0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff]
    
    # LE: CD 25 C2 EF E3 77 BB 36 96 E0 1B 69 78 D8 40 C5
    # BE: EF C2 25 CD 36 BB 77 E3 69 1B E0 96 C5 40 D8 78
    Waledac39_key_Encrypt = [0xEF,0xC2,0x25,0xCD,0x36,0xBB,0x77,0xE3,0x69,0x1B,0xE0,0x96,0xC5,0x40,0xD8,0x78]
    

    expandedKey = expandKey(Waledac39_key_Encrypt, 16, 176) 

   # expandedKey_cal = [0x0, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xc0, 0x39, 0x34, 0x78, 0x84, 0x6c, 0x52, 0xf, 0xc, 0xf5, 0xf8, 0xb4, 0xc0, 0x28, 0x16, 0x4b, 0xf6, 0x7e, 0x87, 0xc2, 0x72, 0x12, 0xd5, 0xcd, 0x7e, 0xe7, 0x2d, 0x79, 0xbe, 0xcf, 0x3b, 0x32, 0x78, 0x9c, 0xa4, 0x6c, 0xa, 0x8e,0x71, 0xa1, 0x74, 0x69, 0x5c, 0xd8, 0xca, 0xa6, 0x67, 0xea, 0x54, 0x19, 0x23, 0x18, 0x5e, 0x97, 0x52, 0xb9, 0x2a, 0xfe, 0xe, 0x61, 0xe0, 0x58, 0x69, 0x8b, 0x2e, 0xe0, 0x1e, 0xf9, 0x70, 0x77, 0x4c, 0x40, 0x5a, 0x89, 0x42, 0x21, 0xba, 0xd1, 0x2b, 0xaa, 0x30, 0x11, 0xb2, 0xd, 0x40, 0x66, 0xfe, 0x4d, 0x1a, 0xef, 0xbc, 0x6c, 0xa0, 0x3e, 0x97, 0xc6, 0xc2, 0x99, 0x6, 0xed, 0x82, 0xff, 0xf8, 0xa0, 0x98, 0x10, 0x44, 0xcc, 0x38, 0x2e, 0xd3, 0xa, 0x73, 0xff, 0x61, 0xea, 0xf1, 0x0, 0x99, 0x4a, 0x69, 0x10, 0xdd, 0x86, 0x51, 0x3e, 0xe, 0x8c, 0xda, 0x54, 0x5, 0x3b, 0x2b, 0x54, 0x9c, 0x71, 0x42, 0x44, 0x41, 0xf7, 0x13, 0x7a, 0x4f, 0x7b, 0x36, 0xd0, 0x24, 0x46, 0x1d, 0x84, 0xb8, 0x37, 0x5f, 0xc0, 0xf9, 0xc0, 0x4c, 0xba, 0xb6, 0xBB]

    # We don't care about the first 16 bytes, and the last 16 bytes! (used in first and last round)
    #expandedKey = [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xc0, 0x39, 0x34, 0x78, 0x84, 0x6c, 0x52, 0xf, 0xc, 0xf5, 0xf8, 0xb4, 0xc0, 0x28, 0x16, 0x4b, 0xf6, 0x7e, 0x87, 0xc2, 0x72, 0x12, 0xd5, 0xcd, 0x7e, 0xe7, 0x2d, 0x79, 0xbe, 0xcf, 0x3b, 0x32, 0x78, 0x9c, 0xa4, 0x6c, 0xa, 0x8e,0x71, 0xa1, 0x74, 0x69, 0x5c, 0xd8, 0xca, 0xa6, 0x67, 0xea, 0x54, 0x19, 0x23, 0x18, 0x5e, 0x97, 0x52, 0xb9, 0x2a, 0xfe, 0xe, 0x61, 0xe0, 0x58, 0x69, 0x8b, 0x2e, 0xe0, 0x1e, 0xf9, 0x70, 0x77, 0x4c, 0x40, 0x5a, 0x89, 0x42, 0x21, 0xba, 0xd1, 0x2b, 0xaa, 0x30, 0x11, 0xb2, 0xd, 0x40, 0x66, 0xfe, 0x4d, 0x1a, 0xef, 0xbc, 0x6c, 0xa0, 0x3e, 0x97, 0xc6, 0xc2, 0x99, 0x6, 0xed, 0x82, 0xff, 0xf8, 0xa0, 0x98, 0x10, 0x44, 0xcc, 0x38, 0x2e, 0xd3, 0xa, 0x73, 0xff, 0x61, 0xea, 0xf1, 0x0, 0x99, 0x4a, 0x69, 0x10, 0xdd, 0x86, 0x51, 0x3e, 0xe, 0x8c, 0xda, 0x54, 0x5, 0x3b, 0x2b, 0x54, 0x9c, 0x71, 0x42, 0x44, 0x41, 0xf7, 0x13, 0x7a, 0x4f, 0x7b, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA]
  

    print "expanded key"
    print len(expandedKey)
    k = 1
    d = 1
    for c in expandedKey[:-16]:

        if d == 17:
            print "\nRK: here we go non optimized"
        if d == 33:
            print "\nRK: optimized"

        print hex(c)[2:],

     
        
        k+=1
        if k == 5:
            print "\n 0x",
            k = 1
        d+=1
       
    print "!! we miss the last 16-bytes of rk !!"

    # The collected 128-bit block, already passed through the first round
    # * and sometimes also through the first full round ! *
    #state   = [0x68,0x74,0x4E,0x5F,0x2B,0x75,0x11,0x18,0xFA,0xF5,0xCE,0x9A,0xCC,0xFF,0xBA,0x87]
    state = [0x42,0x5A,0x68,0x39,0x31,0x41,0x59,0x26,0x53,0x59,0xAC,0xAC,0xAB,0x14,0x00,0x00]


   
    # the 128 bit block to encode
    block = [0] * 16

    # Mapping to a matrix
    for i in range(4):
        # iterate over the rows
        for j in range(4):
            block[(i+(j*4))] = state[(i*4)+j]
    
    #final_state = aes_main(block, expandedKey, 10)

    final_state = aes_main_true(block, expandedKey, 10)

    # unmap the block again into the output
    output = [0] * 16
    for k in range(4):
        # iterate over the rows
        for l in range(4):
            output[(k*4)+l] = final_state[(k+(l*4))]
    
    print "\nfinal state"
    for c in output:
        print hex(c)[2:],


def beta(state):

    Waledac39_key_Encrypt = [0xEF,0xC2,0x25,0xCD,0x36,0xBB,0x77,0xE3,0x69,0x1B,0xE0,0x96,0xC5,0x40,0xD8,0x78]
    #Waledac39_key_Encrypt = [0xCD,0x25,0xC2,0xEF,0xE3,0x77,0xBB,0x36,0x96,0xE0,0x1B,0x69,0x78,0xD8,0x40,0xC5]
    
    #Waledac39_key_Encrypt = [0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff]

    expandedKey = expandKey(Waledac39_key_Encrypt, 16, 176) 

    


    # the 128 bit block to encode
    block = [0] * 16

    # Mapping to a matrix
    for i in range(4):
        # iterate over the rows
        for j in range(4):
            block[(i+(j*4))] = state[(i*4)+j]
    
    #final_state = aes_main(block, expandedKey, 10)

    final_state = aes_main_optimized(block, expandedKey, 10)

    # unmap the block again into the output
    output = [0] * 16
    for k in range(4):
        # iterate over the rows
        for l in range(4):
            output[(k*4)+l] = final_state[(k+(l*4))]
    
    print "final state"
    for c in output:
        print hex(c)[2:],




